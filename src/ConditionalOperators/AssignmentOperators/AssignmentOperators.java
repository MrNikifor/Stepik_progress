package ConditionalOperators.AssignmentOperators;

public class AssignmentOperators {

//    Операторы присваивания
//
//    Операторы присваивания - это специальные команды, которые позволяют занести значение в переменную. С самым простым из них мы уже познакомились, это знак "=".
//
//    int a = 5;       // в переменную a заносится значение 5
//    String b = "Hi"; // в переменную b заносится значение "Hi"
//
//    Но есть и более интересные операторы, которые позволяют нам писать код чуть проще. Представим, что нам нужно увеличить значение переменной а на 10. Это можно сделать так:
//
//    int a = 20;
//    a = a + 10;
//
//    Однако есть более лаконичная запись второй строки:
//
//    int a = 20;
//    a += 10;
//
//    Этот трюк работает со всеми знаками:
//
//    int a = 5;
//    a += 10;  // a = 15
//    a *= 2;   // a = 30
//    a /= 3;   // a = 10
//    a -= 2;   // a = 8
//    a %= 3;   // a = 2
//
//    Помимо этого, особую позицию в программировании занимает увеличение или уменьшение значения переменной на 1. Это называют инкрементирование и декрементирование.
//
//    Следующие записи позволяют увеличивать значение переменной на 1.
//
//    int a = 10;
//    a++; //постинкримент, a = 11
//++a; //прединкремент, a = 12
//
//    Но если каждая из команд меняет значение переменной, то зачем их 2? Почему просто не оставить одну. Ответ прост. Помимо того, что инкремент увеличивает значение переменной, он также и возвращает значение, которое тоже можно записать в переменную, и вот тут уже есть разница. Постинкримент сначала возвращает значение переменной, а потом увеличивает его, а прединкремент наоборот.
//
//    int a = 10;
//    int b = a++; // b = 10, a = 11
//    int c = ++a; // c = 12, a = 12
//
//    Аналогичные рассуждения справедливы и для декремента. Он работает также, только со знаком минус:
//
//    int a = 10;
//    int b = a--; // b = 10, a = 9
//    int c = --a; // c = 8, a = 8


}
