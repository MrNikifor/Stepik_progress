package ConditionalOperators.Branching;
//Ветвление
//
//        Давайте теперь узнаем, что такое оператор ветвления, для чего он нужен и как записывается.
//
//        Опера́тор ветвле́ния (усло́вная инстру́кция, усло́вный опера́тор) — оператор, конструкция языка программирования, обеспечивающая выполнение определённой команды (набора команд) только при условии истинности некоторого логического выражения, либо выполнение одной из нескольких команд (наборов команд) в зависимости от значения некоторого выражения.
//
//        Звучит сложно, но на деле всё просто. Разберём пример из жизни. Давайте подумаем, как мы решаем, стоит ли брать с собой зонт, когда выходим на улицу. Отвечать, конечно, можно по-разному, но самый простой и очевидный ответ:
//
//        Если на улице идёт дождь, то берём зонт.
//
//        То есть при выполнении какого-либо условия в конкретной ситуации мы можем вести себя по-разному. Точно так же и программа в зависимости от условия может выполнять различные действия.
//
//        В общем виде оператор ветвления с одной ветвью записывается так:
//
//        if (<условие>) {
//        команда 1;
//        команда 2;
//        ...
//        }
//
//        Давайте рассмотрим элементарный блок кода, в котором используется ветвление:
//
//        Scanner sc = new Scanner(System.in);
//        int a = sc.nextInt();
//        if (a > 0) {
//        System.out.println("Ваше число положительное");
//        }
//
//        При выполнении этого кода, если мы введём положительное число, то на экране появится надпись "Ваше число положительное". В противном же случае ничего не появится.
//
//        Но это была лишь укороченная запись оператора. Его полная запись аналогична примеру:
//
//        Если на улице идёт дождь, то берём зонт, иначе возьмём солнцезащитные очки.
//
//        А общий вид записывается так:
//
//        if (<условие>) {
//        команда 1;
//        команда 2;
//        ...
//        }else{
//        команда 1;
//        команда 2;
//        ...
//        }
//
//        Теперь давайте дополним наш код :
//
//        Scanner sc = new Scanner(System.in);
//        int a = sc.nextInt();
//        if (a > 0) {
//        System.out.println("Ваше число положительное");
//        }else{
//        System.out.println("Ваше число отрицательное");
//        }
//
//        Теперь, если мы введём не положительное число, то будет выведена фраза: "Ваше число отрицательное".
//
//        Но программа пока работает неверно, так как 0 не является ни положительным, ни отрицательным числом.
//        Что тогда делать? Улучшим нашу программу, прописав новую ветку развития событий.  Это можно сделать двумя способами, давайте разберём каждый из них.
//
//        Первый:
//
//        Scanner sc = new Scanner(System.in);
//        int a = sc.nextInt();
//        if (a > 0) {
//        System.out.println("Ваше число положительное");
//        }
//        if (a < 0) {
//        System.out.println("Ваше число отрицательное");
//        }else{
//        System.out.println("Ваше число - 0");
//        }
//
//        Второй:
//
//        Scanner sc = new Scanner(System.in);
//        int a = sc.nextInt();
//        if (a > 0) {
//        System.out.println("Ваше число положительное");
//        }else{
//        if (a < 0) {
//        System.out.println("Ваше число отрицательное");
//        }else{
//        System.out.println("Ваше число - 0");
//        }
//        }
//
//        Второй способ является правильным, так как в первом случае всегда будет проверяться 2 условия.
//        В следствии чего на экран может вывестись две строки. Попробуйте скомпилировать код и ввести сначала отрицательное число, потом 0, потом положительное число.
public class Branching {

}
